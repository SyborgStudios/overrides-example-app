{"version":"0.1.11","branch_name":"head","author_name":"","committer_name":"","branch_name_to_report":"HEAD","last_commit_id":"","last_commit_name":"","last_commit_name_to_report":"","working_directory":"/Users/simonmeyborg/Documents/syborgstudios/projects/overrides-example-app","bundle_path":"/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0","methods_collection":{"Date":{"instance_methods":{"xmlschema":{"sha":null,"location":null,"body":null,"is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/date/conversions.rb",94],"overriding_body":"def xmlschema\n  in_time_zone.xmlschema\nend\n","overriding_sha":"d93065dc5bb00f473ea489fb8991e77ac0949df6","overriding_is_part_of_app":false},"+":{"sha":null,"location":null,"body":null,"is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/date/calculations.rb",90],"overriding_body":"def plus_with_duration(other) # :nodoc:\n  if ActiveSupport::Duration === other\n    other.since(self)\n  else\n    plus_without_duration(other)\n  end\nend\n","overriding_sha":"80b3fed4c831f308f8af3dd2f806b5330ebaf857","overriding_is_part_of_app":false},"-":{"sha":null,"location":null,"body":null,"is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/date/calculations.rb",100],"overriding_body":"def minus_with_duration(other) # :nodoc:\n  if ActiveSupport::Duration === other\n    plus_with_duration(-other)\n  else\n    minus_without_duration(other)\n  end\nend\n","overriding_sha":"c3dbcf36cd96537d3f8c777643e5dca21246dac0","overriding_is_part_of_app":false},"to_time":{"sha":null,"location":null,"body":null,"is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/date/conversions.rb",82],"overriding_body":"def to_time(form = :local)\n  raise ArgumentError, \"Expected :local or :utc, got #{form.inspect}.\" unless [:local, :utc].include?(form)\n  ::Time.public_send(form, year, month, day)\nend\n","overriding_sha":"832993b4df5a299e774e45a107a15cf96e370415","overriding_is_part_of_app":false},"\u003c=\u003e":{"sha":null,"location":null,"body":null,"is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/date/calculations.rb",137],"overriding_body":"def compare_with_coercion(other)\n  if other.is_a?(Time)\n    to_datetime \u003c=\u003e other\n  else\n    compare_without_coercion(other)\n  end\nend\n","overriding_sha":"e7a95f766212aeff74e7bdbe890fd6a7572c1547","overriding_is_part_of_app":false},"inspect":{"sha":null,"location":null,"body":null,"is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/date/conversions.rb",62],"overriding_body":"def readable_inspect\n  strftime(\"%a, %d %b %Y\")\nend\n","overriding_sha":"96254fe55bdcbd66ba9dff86fee04f3be63df512","overriding_is_part_of_app":false}},"singleton_methods":{},"added_instance_methods":{},"added_singleton_methods":{}},"Rails::Application":{"instance_methods":{"assets":{"sha":"530ef7099a921a6f6549929cc5f93def5d189247","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/railties-7.0.4/lib/rails/application.rb",97],"body":"attr_accessor :assets, :sandbox\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/sprockets-rails-3.4.2/lib/sprockets/railtie.rb",30],"overriding_body":"attr_accessor :assets\n","overriding_sha":"3e9367fffd1967bef8b384e40ccc345ae71b2342","overriding_is_part_of_app":false},"assets=":{"sha":"530ef7099a921a6f6549929cc5f93def5d189247","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/railties-7.0.4/lib/rails/application.rb",97],"body":"attr_accessor :assets, :sandbox\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/sprockets-rails-3.4.2/lib/sprockets/railtie.rb",30],"overriding_body":"attr_accessor :assets\n","overriding_sha":"3e9367fffd1967bef8b384e40ccc345ae71b2342","overriding_is_part_of_app":false}},"singleton_methods":{},"added_instance_methods":{},"added_singleton_methods":{}},"BigDecimal":{"instance_methods":{"to_s":{"sha":null,"location":null,"body":null,"is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/big_decimal/conversions.rb",8],"overriding_body":"def to_s(format = \"F\")\n  super(format)\nend\n","overriding_sha":"3d3973ce590b3375f3bee4de68d5c446f94727bd","overriding_is_part_of_app":false}},"singleton_methods":{},"added_instance_methods":{},"added_singleton_methods":{}},"DateTime":{"instance_methods":{"to_time":{"sha":null,"location":null,"body":null,"is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/date_time/compatibility.rb",15],"overriding_body":"def to_time\n  preserve_timezone ? getlocal(utc_offset) : getlocal\nend\n","overriding_sha":"b22cabef684b7b2052a4bed766f09d63c9905026","overriding_is_part_of_app":false}},"singleton_methods":{},"added_instance_methods":{},"added_singleton_methods":{}},"Time":{"instance_methods":{"rfc3339":{"sha":"f78e5e2369f7ea54b08b10627039142b18dbe0cf","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",158],"body":"def xmlschema(fraction_digits = 0)\n  \"#{time.strftime(PRECISIONS[fraction_digits.to_i])}#{formatted_offset(true, 'Z')}\"\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/3.1.0/time.rb",714],"overriding_body":"def xmlschema(fraction_digits=0)\n  fraction_digits = fraction_digits.to_i\n  s = strftime(\"%FT%T\")\n  if fraction_digits \u003e 0\n    s \u003c\u003c strftime(\".%#{fraction_digits}N\")\n  end\n  s \u003c\u003c (utc? ? 'Z' : strftime(\"%:z\"))\nend\n","overriding_sha":"f234fe79eb198d56ddaea32f8c21eb6e84c06268","overriding_is_part_of_app":false},"xmlschema":{"sha":"f78e5e2369f7ea54b08b10627039142b18dbe0cf","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",158],"body":"def xmlschema(fraction_digits = 0)\n  \"#{time.strftime(PRECISIONS[fraction_digits.to_i])}#{formatted_offset(true, 'Z')}\"\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/3.1.0/time.rb",714],"overriding_body":"def xmlschema(fraction_digits=0)\n  fraction_digits = fraction_digits.to_i\n  s = strftime(\"%FT%T\")\n  if fraction_digits \u003e 0\n    s \u003c\u003c strftime(\".%#{fraction_digits}N\")\n  end\n  s \u003c\u003c (utc? ? 'Z' : strftime(\"%:z\"))\nend\n","overriding_sha":"f234fe79eb198d56ddaea32f8c21eb6e84c06268","overriding_is_part_of_app":false},"rfc2822":{"sha":"238bcde9e9145cb4b623844a1dbff41098c5106a","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",204],"body":"def rfc2822\n  to_fs(:rfc822)\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/3.1.0/time.rb",669],"overriding_body":"def rfc2822\n  strftime('%a, %d %b %Y %T ') \u003c\u003c (utc? ? '-0000' : strftime('%z'))\nend\n","overriding_sha":"8099c571bb025a316b88a8242371e3c662665c67","overriding_is_part_of_app":false},"rfc822":{"sha":"238bcde9e9145cb4b623844a1dbff41098c5106a","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",204],"body":"def rfc2822\n  to_fs(:rfc822)\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/3.1.0/time.rb",669],"overriding_body":"def rfc2822\n  strftime('%a, %d %b %Y %T ') \u003c\u003c (utc? ? '-0000' : strftime('%z'))\nend\n","overriding_sha":"8099c571bb025a316b88a8242371e3c662665c67","overriding_is_part_of_app":false},"httpdate":{"sha":"3a5983af943eadbefbd65fc0e7809f50a22d4654","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",196],"body":"def httpdate\n  utc.httpdate\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/3.1.0/time.rb",689],"overriding_body":"def httpdate\n  getutc.strftime('%a, %d %b %Y %T GMT')\nend\n","overriding_sha":"32ebe57bde59e4c1368175b5d0b861bee73899fd","overriding_is_part_of_app":false},"+":{"sha":"70a50ca537bba43fccf8518cee2d89a3ac6aaf87","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",328],"body":"def +(other)\n  if duration_of_variable_length?(other)\n    method_missing(:+, other)\n  else\n    result = utc.acts_like?(:date) ? utc.since(other) : utc + other rescue utc.since(other)\n    result.in_time_zone(time_zone)\n  end\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/calculations.rb",280],"overriding_body":"def plus_with_duration(other) # :nodoc:\n  if ActiveSupport::Duration === other\n    other.since(self)\n  else\n    plus_without_duration(other)\n  end\nend\n","overriding_sha":"80b3fed4c831f308f8af3dd2f806b5330ebaf857","overriding_is_part_of_app":false},"-":{"sha":"113ea9aa036a682412523145103cad5ad40169ea","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",362],"body":"def -(other)\n  if other.acts_like?(:time)\n    to_time - other.to_time\n  elsif duration_of_variable_length?(other)\n    method_missing(:-, other)\n  else\n    result = utc.acts_like?(:date) ? utc.ago(other) : utc - other rescue utc.ago(other)\n    result.in_time_zone(time_zone)\n  end\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/calculations.rb",303],"overriding_body":"def minus_with_coercion(other)\n  other = other.comparable_time if other.respond_to?(:comparable_time)\n  other.is_a?(DateTime) ? to_f - other.to_f : minus_without_coercion(other)\nend\n","overriding_sha":"9cb7bfbcba07356ae64921e3248955a3818b1dad","overriding_is_part_of_app":false},"acts_like_time?":{"sha":"53d8818221d6c38b66674f35f56be255d39132b5","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",523],"body":"def acts_like_time?\n  true\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/acts_like.rb",7],"overriding_body":"def acts_like_time?\n  true\nend\n","overriding_sha":"53d8818221d6c38b66674f35f56be255d39132b5","overriding_is_part_of_app":false},"to_time":{"sha":"ad67fb935b0f03fd62191ea6149f74e4baa14a35","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",514],"body":"def to_time\n  if preserve_timezone\n    @to_time_with_instance_offset ||= getlocal(utc_offset)\n  else\n    @to_time_with_system_offset ||= getlocal\n  end\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/compatibility.rb",13],"overriding_body":"def to_time\n  preserve_timezone ? self : getlocal\nend\n","overriding_sha":"1984348087e2b9c5f2a47dd6670763b68a0d8260","overriding_is_part_of_app":false},"to_formatted_s":{"sha":"d9378bd91e7813c8cb616ad18ffe6795949b8d40","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",241],"body":"def to_fs(format = :default)\n  if format == :db\n    utc.to_fs(format)\n  elsif formatter = ::Time::DATE_FORMATS[format]\n    formatter.respond_to?(:call) ? formatter.call(self).to_s : strftime(formatter)\n  else\n    # Change to to_s when deprecation is gone.\n    \"#{time.strftime(\"%Y-%m-%d %H:%M:%S\")} #{formatted_offset(false, 'UTC')}\"\n  end\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/conversions.rb",53],"overriding_body":"def to_fs(format = :default)\n  if formatter = DATE_FORMATS[format]\n    formatter.respond_to?(:call) ? formatter.call(self).to_s : strftime(formatter)\n  else\n    # Change to `to_s` when deprecation is gone. Also deprecate `to_default_s`.\n    to_default_s\n  end\nend\n","overriding_sha":"8a72666ba6dc7f2d6d156c0f611104c031ff2e25","overriding_is_part_of_app":false},"to_fs":{"sha":"d9378bd91e7813c8cb616ad18ffe6795949b8d40","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",241],"body":"def to_fs(format = :default)\n  if format == :db\n    utc.to_fs(format)\n  elsif formatter = ::Time::DATE_FORMATS[format]\n    formatter.respond_to?(:call) ? formatter.call(self).to_s : strftime(formatter)\n  else\n    # Change to to_s when deprecation is gone.\n    \"#{time.strftime(\"%Y-%m-%d %H:%M:%S\")} #{formatted_offset(false, 'UTC')}\"\n  end\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/conversions.rb",53],"overriding_body":"def to_fs(format = :default)\n  if formatter = DATE_FORMATS[format]\n    formatter.respond_to?(:call) ? formatter.call(self).to_s : strftime(formatter)\n  else\n    # Change to `to_s` when deprecation is gone. Also deprecate `to_default_s`.\n    to_default_s\n  end\nend\n","overriding_sha":"8a72666ba6dc7f2d6d156c0f611104c031ff2e25","overriding_is_part_of_app":false},"advance":{"sha":"eb706a28fec279e171a2d7704e6410f7aa5a109e","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",451],"body":"def advance(options)\n  # If we're advancing a value of variable length (i.e., years, weeks, months, days), advance from #time,\n  # otherwise advance from #utc, for accuracy when moving across DST boundaries\n  if options.values_at(:years, :weeks, :months, :days).any?\n    method_missing(:advance, options)\n  else\n    utc.advance(options).in_time_zone(time_zone)\n  end\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/calculations.rb",182],"overriding_body":"def advance(options)\n  unless options[:weeks].nil?\n    options[:weeks], partial_weeks = options[:weeks].divmod(1)\n    options[:days] = options.fetch(:days, 0) + 7 * partial_weeks\n  end\n\n  unless options[:days].nil?\n    options[:days], partial_days = options[:days].divmod(1)\n    options[:hours] = options.fetch(:hours, 0) + 24 * partial_days\n  end\n\n  d = to_date.gregorian.advance(options)\n  time_advanced_by_date = change(year: d.year, month: d.month, day: d.day)\n  seconds_to_advance = \\\n    options.fetch(:seconds, 0) +\n    options.fetch(:minutes, 0) * 60 +\n    options.fetch(:hours, 0) * 3600\n\n  if seconds_to_advance.zero?\n    time_advanced_by_date\n  else\n    time_advanced_by_date.since(seconds_to_advance)\n  end\nend\n","overriding_sha":"95c2d6bf00efd6fbcd3fb27de8195ac3650380c1","overriding_is_part_of_app":false},"in":{"sha":"70a50ca537bba43fccf8518cee2d89a3ac6aaf87","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",328],"body":"def +(other)\n  if duration_of_variable_length?(other)\n    method_missing(:+, other)\n  else\n    result = utc.acts_like?(:date) ? utc.since(other) : utc + other rescue utc.since(other)\n    result.in_time_zone(time_zone)\n  end\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/calculations.rb",213],"overriding_body":"def since(seconds)\n  self + seconds\nrescue\n  to_datetime.since(seconds)\nend\n","overriding_sha":"a4333791f1579f88d05db96d341dba2749a6f532","overriding_is_part_of_app":false},"formatted_offset":{"sha":"50114672943c6bd33561f0463357e9d42935ca73","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",135],"body":"def formatted_offset(colon = true, alternate_utc_string = nil)\n  utc? \u0026\u0026 alternate_utc_string || TimeZone.seconds_to_utc_offset(utc_offset, colon)\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/conversions.rb",69],"overriding_body":"def formatted_offset(colon = true, alternate_utc_string = nil)\n  utc? \u0026\u0026 alternate_utc_string || ActiveSupport::TimeZone.seconds_to_utc_offset(utc_offset, colon)\nend\n","overriding_sha":"9a8635a881180cf863de7573c0f4c5aa8c6d2081","overriding_is_part_of_app":false},"since":{"sha":"70a50ca537bba43fccf8518cee2d89a3ac6aaf87","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",328],"body":"def +(other)\n  if duration_of_variable_length?(other)\n    method_missing(:+, other)\n  else\n    result = utc.acts_like?(:date) ? utc.since(other) : utc + other rescue utc.since(other)\n    result.in_time_zone(time_zone)\n  end\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/calculations.rb",213],"overriding_body":"def since(seconds)\n  self + seconds\nrescue\n  to_datetime.since(seconds)\nend\n","overriding_sha":"a4333791f1579f88d05db96d341dba2749a6f532","overriding_is_part_of_app":false},"ago":{"sha":"caef15545bf7de62596187d117f31951002a5558","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",390],"body":"def ago(other)\n  since(-other)\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/calculations.rb",208],"overriding_body":"def ago(seconds)\n  since(-seconds)\nend\n","overriding_sha":"c8cec7912e29d31e2c079997bd92404ad0c8d02f","overriding_is_part_of_app":false},"change":{"sha":"3a70dfc902f458b55b8ee7ec6ff7f453eaa1f18a","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",411],"body":"def change(options)\n  if options[:zone] \u0026\u0026 options[:offset]\n    raise ArgumentError, \"Can't change both :offset and :zone at the same time: #{options.inspect}\"\n  end\n\n  new_time = time.change(options)\n\n  if options[:zone]\n    new_zone = ::Time.find_zone(options[:zone])\n  elsif options[:offset]\n    new_zone = ::Time.find_zone(new_time.utc_offset)\n  end\n\n  new_zone ||= time_zone\n  periods = new_zone.periods_for_local(new_time)\n\n  self.class.new(nil, new_zone, new_time, periods.include?(period) ? period : nil)\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/calculations.rb",138],"overriding_body":"def change(options)\n  new_year   = options.fetch(:year, year)\n  new_month  = options.fetch(:month, month)\n  new_day    = options.fetch(:day, day)\n  new_hour   = options.fetch(:hour, hour)\n  new_min    = options.fetch(:min, options[:hour] ? 0 : min)\n  new_sec    = options.fetch(:sec, (options[:hour] || options[:min]) ? 0 : sec)\n  new_offset = options.fetch(:offset, nil)\n\n  if new_nsec = options[:nsec]\n    raise ArgumentError, \"Can't change both :nsec and :usec at the same time: #{options.inspect}\" if options[:usec]\n    new_usec = Rational(new_nsec, 1000)\n  else\n    new_usec = options.fetch(:usec, (options[:hour] || options[:min] || options[:sec]) ? 0 : Rational(nsec, 1000))\n  end\n\n  raise ArgumentError, \"argument out of range\" if new_usec \u003e= 1000000\n\n  new_sec += Rational(new_usec, 1000000)\n\n  if new_offset\n    ::Time.new(new_year, new_month, new_day, new_hour, new_min, new_sec, new_offset)\n  elsif utc?\n    ::Time.utc(new_year, new_month, new_day, new_hour, new_min, new_sec)\n  elsif zone\u0026.respond_to?(:utc_to_local)\n    ::Time.new(new_year, new_month, new_day, new_hour, new_min, new_sec, zone)\n  elsif zone\n    ::Time.local(new_year, new_month, new_day, new_hour, new_min, new_sec)\n  else\n    ::Time.new(new_year, new_month, new_day, new_hour, new_min, new_sec, utc_offset)\n  end\nend\n","overriding_sha":"3d4cfbe7e5fbf585080c816e1a53110057f85836","overriding_is_part_of_app":false},"\u003c=\u003e":{"sha":"7a999e99289db284e0dc8f71281bf380de039ccd","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",261],"body":"def \u003c=\u003e(other)\n  utc \u003c=\u003e other\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/calculations.rb",312],"overriding_body":"def compare_with_coercion(other)\n  # we're avoiding Time#to_datetime and Time#to_time because they're expensive\n  if other.class == Time\n    compare_without_coercion(other)\n  elsif other.is_a?(Time)\n    compare_without_coercion(other.to_time)\n  else\n    to_datetime \u003c=\u003e other\n  end\nend\n","overriding_sha":"07f750931ebdf2f20d1796b1c784cba73ca540bd","overriding_is_part_of_app":false},"eql?":{"sha":"46426b9087a91bbc3cf1e5c70674e13ca99e78f0","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",304],"body":"def eql?(other)\n  other.eql?(utc)\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/time/calculations.rb",327],"overriding_body":"def eql_with_coercion(other)\n  # if other is an ActiveSupport::TimeWithZone, coerce a Time instance from it so we can do eql? comparison\n  other = other.comparable_time if other.respond_to?(:comparable_time)\n  eql_without_coercion(other)\nend\n","overriding_sha":"f03eed863306ca2d7c369be9570a3d587f85db3d","overriding_is_part_of_app":false},"blank?":{"sha":"0847b981283fa097b9fa2131abf4f0ea99096fff","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",534],"body":"def blank?\n  false\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/object/blank.rb",152],"overriding_body":"def blank?\n  false\nend\n","overriding_sha":"0847b981283fa097b9fa2131abf4f0ea99096fff","overriding_is_part_of_app":false},"as_json":{"sha":"166d9cf546e82176265621ad82e41c31c4ec836a","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",176],"body":"def as_json(options = nil)\n  if ActiveSupport::JSON::Encoding.use_standard_json_time_format\n    xmlschema(ActiveSupport::JSON::Encoding.time_precision)\n  else\n    %(#{time.strftime(\"%Y/%m/%d %H:%M:%S\")} #{formatted_offset(false)})\n  end\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/core_ext/object/json.rb",187],"overriding_body":"def as_json(options = nil) # :nodoc:\n  if ActiveSupport::JSON::Encoding.use_standard_json_time_format\n    xmlschema(ActiveSupport::JSON::Encoding.time_precision)\n  else\n    %(#{strftime(\"%Y/%m/%d %H:%M:%S\")} #{formatted_offset(false)})\n  end\nend\n","overriding_sha":"73a1946d1e441436a5471d27720fc2784e2554bf","overriding_is_part_of_app":false},"iso8601":{"sha":"f78e5e2369f7ea54b08b10627039142b18dbe0cf","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/activesupport-7.0.4/lib/active_support/time_with_zone.rb",158],"body":"def xmlschema(fraction_digits = 0)\n  \"#{time.strftime(PRECISIONS[fraction_digits.to_i])}#{formatted_offset(true, 'Z')}\"\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/3.1.0/time.rb",714],"overriding_body":"def xmlschema(fraction_digits=0)\n  fraction_digits = fraction_digits.to_i\n  s = strftime(\"%FT%T\")\n  if fraction_digits \u003e 0\n    s \u003c\u003c strftime(\".%#{fraction_digits}N\")\n  end\n  s \u003c\u003c (utc? ? 'Z' : strftime(\"%:z\"))\nend\n","overriding_sha":"f234fe79eb198d56ddaea32f8c21eb6e84c06268","overriding_is_part_of_app":false}},"singleton_methods":{},"added_instance_methods":{},"added_singleton_methods":{}},"Nokogiri::XML::Node":{"instance_methods":{"inner_html":{"sha":"174fed720c84a7b9aaaf6fd64377c2a88ff54e10","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/nokogiri-1.13.10/lib/nokogiri/xml/node.rb",1102],"body":"def inner_html(*args)\n  children.map { |x| x.to_html(*args) }.join\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/nokogiri-1.13.10/lib/nokogiri/html5/node.rb",28],"overriding_body":"def inner_html(options = {})\n  return super(options) unless document.is_a?(HTML5::Document)\n\n  result = options[:preserve_newline] \u0026\u0026 HTML5.prepend_newline?(self) ? +\"\\n\" : +\"\"\n  result \u003c\u003c children.map { |child| child.to_html(options) }.join\n  result\nend\n","overriding_sha":"7d44133cb4607c125cc8eb179fa90ad59f163005","overriding_is_part_of_app":false},"write_to":{"sha":"5c3b62747216d214d71db553984c7e750291eb45","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/nokogiri-1.13.10/lib/nokogiri/xml/node.rb",1256],"body":"def write_to(io, *options)\n  options = options.first.is_a?(Hash) ? options.shift : {}\n  encoding = options[:encoding] || options[0]\n  if Nokogiri.jruby?\n    save_options = options[:save_with] || options[1]\n    indent_times = options[:indent] || 0\n  else\n    save_options = options[:save_with] || options[1] || SaveOptions::FORMAT\n    indent_times = options[:indent] || 2\n  end\n  indent_text = options[:indent_text] || \" \"\n\n  # Any string times 0 returns an empty string. Therefore, use the same\n  # string instead of generating a new empty string for every node with\n  # zero indentation.\n  indentation = indent_times.zero? ? \"\" : (indent_text * indent_times)\n\n  config = SaveOptions.new(save_options.to_i)\n  yield config if block_given?\n\n  native_write_to(io, encoding, indentation, config.options)\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/nokogiri-1.13.10/lib/nokogiri/html5/node.rb",36],"overriding_body":"def write_to(io, *options)\n  return super(io, *options) unless document.is_a?(HTML5::Document)\n\n  options = options.first.is_a?(Hash) ? options.shift : {}\n  encoding = options[:encoding] || options[0]\n  if Nokogiri.jruby?\n    save_options = options[:save_with] || options[1]\n    indent_times = options[:indent] || 0\n  else\n    save_options = options[:save_with] || options[1] || XML::Node::SaveOptions::FORMAT\n    indent_times = options[:indent] || 2\n  end\n  indent_string = (options[:indent_text] || \" \") * indent_times\n\n  config = XML::Node::SaveOptions.new(save_options.to_i)\n  yield config if block_given?\n\n  config_options = config.options\n  if config_options \u0026 (XML::Node::SaveOptions::AS_XML | XML::Node::SaveOptions::AS_XHTML) != 0\n    # Use Nokogiri's serializing code.\n    native_write_to(io, encoding, indent_string, config_options)\n  else\n    # Serialize including the current node.\n    encoding ||= document.encoding || Encoding::UTF_8\n    internal_ops = {\n      preserve_newline: options[:preserve_newline] || false,\n    }\n    HTML5.serialize_node_internal(self, io, encoding, internal_ops)\n  end\nend\n","overriding_sha":"7ddd022289403e7637023b527820cbd32808613b","overriding_is_part_of_app":false},"fragment":{"sha":"19170b6d61795d4a3af671f64326a1921c67d34f","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/nokogiri-1.13.10/lib/nokogiri/xml/node.rb",929],"body":"def fragment(tags)\n  document.related_class(\"DocumentFragment\").new(document, tags, self)\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/nokogiri-1.13.10/lib/nokogiri/html5/node.rb",67],"overriding_body":"def fragment(tags)\n  return super(tags) unless document.is_a?(HTML5::Document)\n\n  DocumentFragment.new(document, tags, self)\nend\n","overriding_sha":"c51361307114fb3e0631dea5316f2a9c9d32b947","overriding_is_part_of_app":false}},"singleton_methods":{},"added_instance_methods":{},"added_singleton_methods":{}},"Reline::LineEditor":{"instance_methods":{"reset":{"sha":"2ab4fcaec954de905356fe94e579fab24369df98","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/reline-0.3.2/lib/reline/line_editor.rb",149],"body":"def reset(prompt = '', encoding:)\n  @rest_height = (Reline::IOGate.get_screen_size.first - 1) - Reline::IOGate.cursor_pos.y\n  @screen_size = Reline::IOGate.get_screen_size\n  @screen_height = @screen_size.first\n  reset_variables(prompt, encoding: encoding)\n  Reline::IOGate.set_winch_handler do\n    @resized = true\n  end\n  if ENV.key?('RELINE_ALT_SCROLLBAR')\n    @full_block = '::'\n    @upper_half_block = \"''\"\n    @lower_half_block = '..'\n    @block_elem_width = 2\n  elsif Reline::IOGate.win?\n    @full_block = '█'\n    @upper_half_block = '▀'\n    @lower_half_block = '▄'\n    @block_elem_width = 1\n  elsif @encoding == Encoding::UTF_8\n    @full_block = '█'\n    @upper_half_block = '▀'\n    @lower_half_block = '▄'\n    @block_elem_width = Reline::Unicode.calculate_width('█')\n  else\n    @full_block = '::'\n    @upper_half_block = \"''\"\n    @lower_half_block = '..'\n    @block_elem_width = 2\n  end\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/debug-1.7.1/lib/debug/console.rb",25],"overriding_body":"def reset(prompt = '', encoding:)\n  super\n  Signal.trap(:SIGWINCH, nil)\nend\n","overriding_sha":"4861349c72d903897af540484727c568b0d6d504","overriding_is_part_of_app":false}},"singleton_methods":{},"added_instance_methods":{},"added_singleton_methods":{}},"ActionDispatch::Request":{"instance_methods":{"reset_session":{"sha":"fbf2e4784e5299cc36dcd021d2c590196d6f0274","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/actionpack-7.0.4/lib/action_dispatch/http/request.rb",359],"body":"def reset_session\n  session.destroy\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/actionpack-7.0.4/lib/action_dispatch/middleware/flash.rb",75],"overriding_body":"def reset_session # :nodoc:\n  super\n  self.flash = nil\nend\n","overriding_sha":"1fdc9b23b07d7569549d24e19a756b99662d7c97","overriding_is_part_of_app":false},"commit_flash":{"sha":"252fe47f6cadb9f6f5639ee9c32eb6956f1a0410","location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/actionpack-7.0.4/lib/action_dispatch/http/request.rb",425],"body":"def commit_flash\nend\n","is_part_of_app":false,"overriding_location":["/Users/simonmeyborg/.rbenv/versions/3.1.3/lib/ruby/gems/3.1.0/gems/actionpack-7.0.4/lib/action_dispatch/middleware/flash.rb",62],"overriding_body":"def commit_flash # :nodoc:\n  return unless session.enabled?\n\n  if flash_hash \u0026\u0026 (flash_hash.present? || session.key?(\"flash\"))\n    session[\"flash\"] = flash_hash.to_session_value\n    self.flash = flash_hash.dup\n  end\n\n  if session.loaded? \u0026\u0026 session.key?(\"flash\") \u0026\u0026 session[\"flash\"].nil?\n    session.delete(\"flash\")\n  end\nend\n","overriding_sha":"0709acb4cc8de896d20866f0468491ab331e7778","overriding_is_part_of_app":false}},"singleton_methods":{},"added_instance_methods":{},"added_singleton_methods":{}}},"number_of_methods":8155,"number_of_methods_in_app_path":0,"number_of_classes":902,"number_of_classes_in_app_path":0}